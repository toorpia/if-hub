#!/usr/bin/env python3
"""
IF-HUB Plugin Schedule Manager
„Éó„É©„Ç∞„Ç§„É≥„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´Ê©üËÉΩÁÆ°ÁêÜ„ÉÑ„Éº„É´
"""

import os
import sys
import argparse
import json
import yaml
from typing import Dict, Any, Optional, List
from datetime import datetime
import importlib.util

class PluginScheduleManager:
    """„Éó„É©„Ç∞„Ç§„É≥„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜ"""
    
    def __init__(self, plugin_root: str = None):
        self.plugin_root = plugin_root or os.path.join(os.path.dirname(__file__))
        self.supported_types = ['analyzer', 'notifier', 'presenter']
        
    def load_plugin_scheduler(self, plugin_type: str, plugin_name: str):
        """„Éó„É©„Ç∞„Ç§„É≥„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É©„Éº„ÇØ„É©„Çπ„Çí„É≠„Éº„Éâ"""
        try:
            # „Éó„É©„Ç∞„Ç§„É≥„Éá„Ç£„É¨„ÇØ„Éà„É™„Éë„Çπ
            plugin_dir = os.path.join(self.plugin_root, f"{plugin_type}s", plugin_name)
            scheduler_path = os.path.join(plugin_dir, "scheduler.py")
            
            if not os.path.exists(scheduler_path):
                raise FileNotFoundError(f"Scheduler module not found: {scheduler_path}")
            
            # ÂãïÁöÑ„Ç§„É≥„Éù„Éº„Éà
            spec = importlib.util.spec_from_file_location(f"{plugin_name}_scheduler", scheduler_path)
            scheduler_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(scheduler_module)
            
            # „Çπ„Ç±„Ç∏„É•„Éº„É©„Éº„ÇØ„É©„Çπ„ÇíÂèñÂæó
            scheduler_class = getattr(scheduler_module, f"{plugin_name.replace('_', '').title()}Scheduler", None)
            if not scheduler_class:
                # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ‰∏ÄËà¨ÁöÑ„Å™ÂêçÂâç
                scheduler_class = getattr(scheduler_module, "PluginScheduler", None)
            
            if not scheduler_class:
                raise AttributeError(f"Scheduler class not found in {scheduler_path}")
            
            return scheduler_class()
            
        except Exception as e:
            print(f"‚ùå Failed to load scheduler for {plugin_type}/{plugin_name}: {e}")
            return None
    
    def list_available_plugins(self) -> Dict[str, List[str]]:
        """Âà©Áî®ÂèØËÉΩ„Å™„Éó„É©„Ç∞„Ç§„É≥‰∏ÄË¶ß„ÇíÂèñÂæó"""
        available = {}
        
        for plugin_type in self.supported_types:
            type_dir = os.path.join(self.plugin_root, f"{plugin_type}s")
            available[plugin_type] = []
            
            if os.path.exists(type_dir):
                for item in os.listdir(type_dir):
                    plugin_path = os.path.join(type_dir, item)
                    if os.path.isdir(plugin_path):
                        # scheduler.py „ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                        scheduler_path = os.path.join(plugin_path, "scheduler.py")
                        if os.path.exists(scheduler_path):
                            available[plugin_type].append(item)
        
        return available
    
    def find_config_files(self, plugin_type: str = None, plugin_name: str = None) -> List[str]:
        """Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢"""
        config_files = []
        config_root = os.path.join(os.path.dirname(self.plugin_root), "configs", "equipments")
        
        if not os.path.exists(config_root):
            return config_files
        
        for equipment_dir in os.listdir(config_root):
            config_path = os.path.join(config_root, equipment_dir, "config.yaml")
            if os.path.exists(config_path):
                try:
                    with open(config_path, 'r', encoding='utf-8') as f:
                        config = yaml.safe_load(f)
                    
                    # „Éó„É©„Ç∞„Ç§„É≥Èñ¢ÈÄ£Ë®≠ÂÆö„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                    if plugin_type == 'analyzer' and plugin_name == 'toorpia_backend':
                        if config.get('toorpia_integration', {}).get('enabled', False):
                            config_files.append(config_path)
                    else:
                        # ‰ªñ„ÅÆ„Éó„É©„Ç∞„Ç§„É≥„Çø„Ç§„Éó„ÅÆÂ†¥Âêà„ÅÆÂà§ÂÆö„É≠„Ç∏„ÉÉ„ÇØ
                        config_files.append(config_path)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  Failed to parse config {config_path}: {e}")
        
        return config_files
    
    def setup_schedules(self, plugin_type: str, plugin_name: str, configs: List[str] = None) -> bool:
        """„Çπ„Ç±„Ç∏„É•„Éº„É´ÂàùÊúü„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó"""
        print(f"üîß Setting up schedules for {plugin_type}/{plugin_name}")
        
        # „Éó„É©„Ç∞„Ç§„É≥„Çπ„Ç±„Ç∏„É•„Éº„É©„Éº„Çí„É≠„Éº„Éâ
        scheduler = self.load_plugin_scheduler(plugin_type, plugin_name)
        if not scheduler:
            return False
        
        # Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
        if not configs:
            configs = self.find_config_files(plugin_type, plugin_name)
        
        if not configs:
            print(f"‚ö†Ô∏è  No valid configuration files found for {plugin_type}/{plugin_name}")
            return False
        
        print(f"üìÑ Found {len(configs)} configuration file(s)")
        for config in configs:
            print(f"  - {config}")
        
        # „Çπ„Ç±„Ç∏„É•„Éº„É©„Éº„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å
        try:
            result = scheduler.setup_schedules(configs)
            if result:
                print(f"‚úÖ Successfully set up schedules for {plugin_type}/{plugin_name}")
            else:
                print(f"‚ùå Failed to set up schedules for {plugin_type}/{plugin_name}")
            return result
        except Exception as e:
            print(f"‚ùå Setup failed: {e}")
            return False
    
    def show_status(self, plugin_type: str, plugin_name: str) -> bool:
        """„Çπ„Ç±„Ç∏„É•„Éº„É´Áä∂Ê≥ÅË°®Á§∫"""
        print(f"üìä Schedule status for {plugin_type}/{plugin_name}")
        
        scheduler = self.load_plugin_scheduler(plugin_type, plugin_name)
        if not scheduler:
            return False
        
        try:
            status = scheduler.get_schedule_status()
            
            if isinstance(status, dict):
                print(json.dumps(status, indent=2, ensure_ascii=False))
            else:
                print(status)
            
            return True
        except Exception as e:
            print(f"‚ùå Failed to get status: {e}")
            return False
    
    def add_equipment(self, config_path: str) -> bool:
        """Êñ∞Ë¶èË®≠ÂÇô„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´ËøΩÂä†"""
        print(f"‚ûï Adding schedule for equipment: {config_path}")
        
        if not os.path.exists(config_path):
            print(f"‚ùå Config file not found: {config_path}")
            return False
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
        except Exception as e:
            print(f"‚ùå Failed to parse config: {e}")
            return False
        
        # „Éó„É©„Ç∞„Ç§„É≥„Çø„Ç§„Éó„ÇíÂà§ÂÆö
        plugin_type = None
        plugin_name = None
        
        if config.get('toorpia_integration', {}).get('enabled', False):
            plugin_type = 'analyzer'
            plugin_name = 'toorpia_backend'
        
        if not plugin_type or not plugin_name:
            print(f"‚ö†Ô∏è  No supported plugin configuration found in {config_path}")
            return False
        
        scheduler = self.load_plugin_scheduler(plugin_type, plugin_name)
        if not scheduler:
            return False
        
        try:
            result = scheduler.add_equipment_schedule(config_path)
            if result:
                print(f"‚úÖ Successfully added schedule for {config_path}")
            else:
                print(f"‚ùå Failed to add schedule for {config_path}")
            return result
        except Exception as e:
            print(f"‚ùå Add failed: {e}")
            return False
    
    def remove_schedules(self, plugin_type: str, plugin_name: str) -> bool:
        """„Çπ„Ç±„Ç∏„É•„Éº„É´ÂâäÈô§"""
        print(f"üóëÔ∏è  Removing schedules for {plugin_type}/{plugin_name}")
        
        scheduler = self.load_plugin_scheduler(plugin_type, plugin_name)
        if not scheduler:
            return False
        
        try:
            result = scheduler.remove_schedules()
            if result:
                print(f"‚úÖ Successfully removed schedules for {plugin_type}/{plugin_name}")
            else:
                print(f"‚ùå Failed to remove schedules for {plugin_type}/{plugin_name}")
            return result
        except Exception as e:
            print(f"‚ùå Remove failed: {e}")
            return False
    
    def enable_schedules(self, plugin_type: str, plugin_name: str) -> bool:
        """„Çπ„Ç±„Ç∏„É•„Éº„É´ÊúâÂäπÂåñ"""
        print(f"‚ñ∂Ô∏è  Enabling schedules for {plugin_type}/{plugin_name}")
        
        scheduler = self.load_plugin_scheduler(plugin_type, plugin_name)
        if not scheduler:
            return False
        
        try:
            result = scheduler.enable_schedules()
            if result:
                print(f"‚úÖ Successfully enabled schedules for {plugin_type}/{plugin_name}")
            else:
                print(f"‚ùå Failed to enable schedules for {plugin_type}/{plugin_name}")
            return result
        except Exception as e:
            print(f"‚ùå Enable failed: {e}")
            return False
    
    def disable_schedules(self, plugin_type: str, plugin_name: str) -> bool:
        """„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÑ°ÂäπÂåñ"""
        print(f"‚è∏Ô∏è  Disabling schedules for {plugin_type}/{plugin_name}")
        
        scheduler = self.load_plugin_scheduler(plugin_type, plugin_name)
        if not scheduler:
            return False
        
        try:
            result = scheduler.disable_schedules()
            if result:
                print(f"‚úÖ Successfully disabled schedules for {plugin_type}/{plugin_name}")
            else:
                print(f"‚ùå Failed to disable schedules for {plugin_type}/{plugin_name}")
            return result
        except Exception as e:
            print(f"‚ùå Disable failed: {e}")
            return False


def main():
    """„É°„Ç§„É≥Âá¶ÁêÜ"""
    parser = argparse.ArgumentParser(
        description='IF-HUB Plugin Schedule Manager',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Setup schedules for toorpia_backend
  python3 schedule_plugin.py --setup --type analyzer --name toorpia_backend
  
  # Check status
  python3 schedule_plugin.py --status --type analyzer --name toorpia_backend
  
  # Add new equipment
  python3 schedule_plugin.py --add --config configs/equipments/new-eq/config.yaml
  
  # List available plugins
  python3 schedule_plugin.py --list
        """
    )
    
    # „É°„Ç§„É≥„Ç¢„ÇØ„Ç∑„Éß„É≥
    action_group = parser.add_mutually_exclusive_group(required=True)
    action_group.add_argument('--setup', action='store_true', help='Setup schedules')
    action_group.add_argument('--status', action='store_true', help='Show schedule status')
    action_group.add_argument('--add', action='store_true', help='Add equipment schedule')
    action_group.add_argument('--remove', action='store_true', help='Remove schedules')
    action_group.add_argument('--enable', action='store_true', help='Enable schedules')
    action_group.add_argument('--disable', action='store_true', help='Disable schedules')
    action_group.add_argument('--list', action='store_true', help='List available plugins')
    
    # „Éó„É©„Ç∞„Ç§„É≥ÊåáÂÆö
    parser.add_argument('--type', choices=['analyzer', 'notifier', 'presenter'], 
                       help='Plugin type')
    parser.add_argument('--name', help='Plugin name')
    parser.add_argument('--config', help='Configuration file path (for --add)')
    parser.add_argument('--dry-run', action='store_true', help='Preview changes without applying')
    
    args = parser.parse_args()
    
    # ÂºïÊï∞„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    if args.list:
        manager = PluginScheduleManager()
        available = manager.list_available_plugins()
        
        print("üìã Available plugins with schedule support:")
        for plugin_type, plugins in available.items():
            if plugins:
                print(f"\n{plugin_type}s:")
                for plugin in plugins:
                    print(f"  - {plugin}")
            else:
                print(f"\n{plugin_type}s: None")
        return 0
    
    if args.add and not args.config:
        parser.error("--add requires --config")
    
    if not args.add and (args.type is None or args.name is None):
        parser.error("--type and --name are required (except for --add and --list)")
    
    # „Éó„É©„Ç∞„Ç§„É≥„Çπ„Ç±„Ç∏„É•„Éº„É´„Éû„Éç„Éº„Ç∏„É£„ÉºÂàùÊúüÂåñ
    manager = PluginScheduleManager()
    
    # „Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°å
    success = False
    
    try:
        if args.setup:
            success = manager.setup_schedules(args.type, args.name)
        elif args.status:
            success = manager.show_status(args.type, args.name)
        elif args.add:
            success = manager.add_equipment(args.config)
        elif args.remove:
            success = manager.remove_schedules(args.type, args.name)
        elif args.enable:
            success = manager.enable_schedules(args.type, args.name)
        elif args.disable:
            success = manager.disable_schedules(args.type, args.name)
    
    except KeyboardInterrupt:
        print("\nüõë Operation cancelled by user")
        return 1
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return 1
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
